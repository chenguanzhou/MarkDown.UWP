<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutItem.Header" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="ActiveLineSwitch.Header" xml:space="preserve">
    <value>高亮当前行</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>MarkDown.UWP 编辑器</value>
  </data>
  <data name="AppTitleBlock.Text" xml:space="preserve">
    <value>MarkDown.UWP 编辑器</value>
  </data>
  <data name="Author.Content" xml:space="preserve">
    <value>陈关州</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>深色</value>
  </data>
  <data name="EditButton.Content" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="EditorItem.Header" xml:space="preserve">
    <value>编辑器</value>
  </data>
  <data name="EffectAfterRestart" xml:space="preserve">
    <value>重启后生效</value>
  </data>
  <data name="EffectAfterRestart4Mobile" xml:space="preserve">
    <value>重启后生效。特别提醒：由于微软的黑锅，移动端App不能自动重启，麻烦您在退出程序后手动打开本App。</value>
  </data>
  <data name="EmailToMe.Content" xml:space="preserve">
    <value>联系开发者</value>
  </data>
  <data name="EnvironmentItem.Header" xml:space="preserve">
    <value>环境</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>退出App</value>
  </data>
  <data name="ExportButton.Content" xml:space="preserve">
    <value>导出为HTML</value>
  </data>
  <data name="FindNext.Label" xml:space="preserve">
    <value>查找下一个</value>
  </data>
  <data name="FindPrevious.Label" xml:space="preserve">
    <value>查找上一个</value>
  </data>
  <data name="FirstDocumentContent" xml:space="preserve">
    <value>欢迎使用 MarkDown.UWP 编辑器!
===================


HI! 这是你在**MarkDown.UWP 编辑器**编辑的第一个文档.

## 文档

**MarkDown.UWP 编辑器**既可以在线工作，也能离线编辑。 它既能打开PC/手机本地的Markdown文档，也能编辑OneDrive中的文档。

## Markdown 支持

**MarkDown.UWP 编辑器** 支持 **CommonMark** 语法:

- **加粗** *倾斜*
- [超链接](http://www.chenguanzhou.com/)
- ![图片](https://avatars3.githubusercontent.com/u/3325132?v=3&amp;s=460)
- 顺序列表 &amp; 无序列表
	- 子列表项
- #### 多级标题
- 水平线
	---------------
- &gt;引用
- 代码块: 
```
// Foo
var bar = 0;
```

## 特点

- **MarkDown.UWP 编辑器** 能打开本地文档, 并且**自动**检测文件编码 (包括 GB1213 &amp; BIG5编码)
- **MarkDown.UWP 编辑器** 支持HTML**实时**预览, 你可以决定是否启用该功能
- **MarkDown.UWP 编辑器** 能够在App退出时，自动保存数据

## 支持
如果你觉得**MarkDown.UWP 编辑器**很好用，请给作者捐一点钱吧！(●ˇ∀ˇ●)

![](https://raw.githubusercontent.com/chenguanzhou/MarkDownEditor/master/MarkDownEditor/alipay.jpg)</value>
  </data>
  <data name="FontFamilyBox.Header" xml:space="preserve">
    <value>字体</value>
  </data>
  <data name="HTMLDocument" xml:space="preserve">
    <value>HTML 网页</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>浅色</value>
  </data>
  <data name="LineNumberSwitch.Header" xml:space="preserve">
    <value>显示行号</value>
  </data>
  <data name="LineWrappingSwitch.Header" xml:space="preserve">
    <value>自动换行</value>
  </data>
  <data name="MarkdownDocument" xml:space="preserve">
    <value>Markdown文档</value>
  </data>
  <data name="MatchCase.Label" xml:space="preserve">
    <value>匹配大小写</value>
  </data>
  <data name="MatchWholeWord.Label" xml:space="preserve">
    <value>匹配全词</value>
  </data>
  <data name="NeedToRestart" xml:space="preserve">
    <value>需要重启App</value>
  </data>
  <data name="NewButton.Content" xml:space="preserve">
    <value>新建</value>
  </data>
  <data name="NoSave" xml:space="preserve">
    <value>不保存</value>
  </data>
  <data name="OpenButton.Content" xml:space="preserve">
    <value>打开</value>
  </data>
  <data name="PreviewItem.Header" xml:space="preserve">
    <value>预览</value>
  </data>
  <data name="Replace.Label" xml:space="preserve">
    <value>替换</value>
  </data>
  <data name="ReplaceAll.Label" xml:space="preserve">
    <value>替换全部</value>
  </data>
  <data name="ReplaceBox.PlaceholderText" xml:space="preserve">
    <value>替换</value>
  </data>
  <data name="Restart" xml:space="preserve">
    <value>重启</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="SaveButton.Content" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="SearchBox.PlaceholderText" xml:space="preserve">
    <value>查找</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="SettingsButton.Content" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="ShowPreviewButton.Content" xml:space="preserve">
    <value>显示预览</value>
  </data>
  <data name="ThemeItem.Header" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="ThemeItem.OffContent" xml:space="preserve">
    <value>深色</value>
  </data>
  <data name="ThemeItem.OnContent" xml:space="preserve">
    <value>浅色</value>
  </data>
  <data name="UntitledTitle" xml:space="preserve">
    <value>无标题</value>
  </data>
  <data name="UseRegularExpression.Label" xml:space="preserve">
    <value>使用正则表达式</value>
  </data>
  <data name="UseWildcard.Label" xml:space="preserve">
    <value>使用通配符</value>
  </data>
  <data name="WhetherSave" xml:space="preserve">
    <value>是否保存已修改的文件？</value>
  </data>
</root>